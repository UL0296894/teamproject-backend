// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       Int     @id @default(autoincrement())
  email    String  @unique
  name     String?
  password String
  salt     String

  reviews Review[] 

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Movie {
  id Int @id

  title       String   @db.VarChar(255)
  posterUrl   String   @db.Text
  backdropUrl   String   @db.Text
  synopsis    String   @db.Text
  rating      Float    @default(0.0)
  releaseDate DateTime
  reviews     Review[]
  // categories  Category[]

  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  categories MovieCategory[]
}

model Review {
  id        Int      @id @default(autoincrement())
  title String
  content   String
  rating    Float
  user      User     @relation(fields: [userId], references: [id],onDelete: Cascade,onUpdate: Cascade)
  userId    Int
  authorName String
  movie     Movie    @relation(fields: [movieId], references: [id],onDelete: Cascade,onUpdate: Cascade)
  movieId   Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Category {
  id            Int             @id @default(autoincrement())
  name          String          @unique
  // movies        Movie[]
  MovieCategory MovieCategory[]
}

model MovieCategory {
  id         Int      @id @default(autoincrement())
  movieId    Int
  categoryId Int
  movie      Movie    @relation(fields: [movieId], references: [id])
  category   Category @relation(fields: [categoryId], references: [id])

  @@unique([movieId, categoryId]) // Assicura che non ci siano duplicati
}
